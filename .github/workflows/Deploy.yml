# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Deploy to EC2

on:
  push:
    branches: ["main"]
  workflow_run:
    workflows: ["Build Node.js CI"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2-key.pem
        chmod 400 ~/.ssh/ec2-key.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2 with Docker Compose
      run: |
        ssh -i ~/.ssh/ec2-key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
          mkdir -p ~/app && \
          cd ~/app && \
          echo "${{ github.sha }}" > version.txt && \
          echo "version: \"3\"" > docker-compose.yml && \
          echo "services:" >> docker-compose.yml && \
          echo "  cyber-server:" >> docker-compose.yml && \
          echo "    image: ovrb/cybershield:latest" >> docker-compose.yml && \
          echo "    ports:" >> docker-compose.yml && \
          echo "      - \"4000:4000\"" >> docker-compose.yml && \
          echo "  nginx:" >> docker-compose.yml && \
          echo "    image: nginx:latest" >> docker-compose.yml && \
          echo "    ports:" >> docker-compose.yml && \
          echo "      - \"80:80\"" >> docker-compose.yml && \
          echo "    volumes:" >> docker-compose.yml && \
          echo "      - ./nginx.conf:/etc/nginx/nginx.conf" >> docker-compose.yml && \
          echo "events {}" > nginx.conf && \
          echo "http {" >> nginx.conf && \
          echo "  server {" >> nginx.conf && \
          echo "    listen 80;" >> nginx.conf && \
          echo "    location / {" >> nginx.conf && \
          echo "      proxy_pass http://cyber-server:4000;" >> nginx.conf && \
          echo "      proxy_set_header Host \$host;" >> nginx.conf && \
          echo "      proxy_set_header X-Real-IP \$remote_addr;" >> nginx.conf && \
          echo "    }" >> nginx.conf && \
          echo "  }" >> nginx.conf && \
          echo "}" >> nginx.conf && \
          docker-compose down || true && \
          docker-compose pull && \
          docker-compose up -d'